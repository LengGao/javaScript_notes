

Array
常用方法
检索方法 find,findIndex,indexOf,lastIndexOf
操作方法 concat,slice,splice,push,unshift,shift,pop,fill,copyWithin
排序方法 reverse,sort
遍历方法 filter,map,entries,keys,values,forEach,for...of,flat,flatMap,reduce,reduceRight
转换方法 Array.form,Array.of,Array(),toLocalString,toString,toSource,join,valueOf
判定方法 Array.isArray,some,every,includes
copyWithin(target,start,end): 将指定位置的元素复制到其他位置
flat(delpth): 按照一个可指定深度递归数组，并得到新数组
flatMap(function callback(currentValue[, index[, array]]) {}[, thisValue]: 与 map 连着深度值为1的 flat 几乎相同
会改变原数组的操作方法：  
特征：
1，会改变数组的长度或元素
2，会对元素排序
例如：splice,copyWithin：但是他不会改变数组长度,push,pop,unshift,shift,fill,reverse,sort
不会改变原数组的操作方法：
特征：
1，进行提取，检索的操作
2，返回值是一个新数组的方法
例如：concat,slice,filter,map

应用
判断方法：
some: 判断有某一元素是否符合
every: 判断所有元素是否都符合
includes: 判断数组中是否有莫元素,
区别在于 includes 能够检测 NaN 等特殊类型
isArray: 是否是Array对象
建所方法：
find: 是否存在某元素，返回any
findIndex 
indexOf
lastIndexOf
是否存在元素 返回 number
却别在于find/findIndex能检测 NaN 等特殊类型 

// 跃过空性
ES6 明确规定会将数组空位转为undefined
forEach filter some every 会跃过空位
map 会跃过空位但是保留空位
join和 toString 会将空位视为undefined，而undefined、null处理为空字符串
Array()、copyWithin、for...of 会保留空位

// 数组深浅拷贝
concat() slice() 理论上凡是不会改变原数组的都可以做为深拷贝一个数组


String
常用方法
检索类: indexOf,lastIndexOf,search,match
提取类：charAt,charCodeAt,slice,substr,substring
操作类：replace(regexp/'str','str'),concat,trim
转化类：split,String.fromCharCode,toLowerCase,toUpperCase,valueOf,toSource
html包装类：anchor:瞄,link,fontSize,fontColor,sub:下标,pub:上标,


RegExp
基本知识
修饰符/模式：i,g,m
元组/范围：[] () |
元字符/转义 .,\w/W,\d/D,\s/S,\b/B,\O,\n,\r,\f,\t,\v,\xxx,\xdd,\uxxxx
量词：+,?,*,n{},?=n,?n,^,$
常用方法
Bool regexppbjt.test(str)
Array/null regexppbjt.exec(str)
RegExp regexpobj.complie(str,str)


Number
常用方法
指数相关：toExponential
小数相关：toFixed,toPrecision


Object
属性的描述性对象
可枚举：enumerable 描述属性是否可以枚举 for...of,Object.Keys,JSON.stringify,Object.assign
可写入：writable 描述属性的值是否可以修改
可配置：configurable 描述该属性是否可以配置它的描述性对象

常用方法
与enumerable有关：for...of,Object.Keys,JSON.stringify,Object.assign,hasOwnProperty
与Descriptor相关：getOwnPropertyDescriptor(含Symbol),getOwnPropertyDescriptors(含Symbol),getOwnPropertyNames(不含Symbol),getOwnPropertySymbols(只含Symbol),Reflect.ownKeys,defineProperty,defineProperties
操作类：Object.assign,Object.is,


SetAndMap
蝉蛹属性
constructor,size
宠用方法
set：add,delete,has,clear
map：set,get,delete,has
转换：new Map/Set([[x,y],[w,z]]),转成其他类型最好用[....mapObj/setObj]转换成数组后再转换为其他类型
子集
weakSet/weakMap   他们的成员或键名只能是对象，采用弱引用的方式


Symbol
常用方法
let sym = Symbol() , Symbol.for() , Symbol.keyFor()


全局属性
infinity,NaN,undefined
全局方法
uri相关：encodeURI,decodeURI,encodeURIComponent,decodeURIComponent
字符编码：escape,unescape,eval
类型转换：Number,String,parseInt,parseFloat
判断：isFinite,isNaN


Generator
部署Iterator接口：
function* g(obj) {
  let keys = Object.key(obj)
  for(let i=0;i<keys.length;i++;)
    const key = keys[i]
    yield [key,obj[key]]
}
let p_obj
for(let [key,val] of g (p_obj)) 
思路总结：将对象转换为本身就具有iterator的数据类型，然后yield吹数据类型的元素，利用for...of 自动遍历Iterator对象的特性将yield 产出值一一取出

使用第一次调用next(x)的参数 
function* g(f) {
  return function () {
    let obj = f()
    obj.next()
    return obj
  }
}
f(function* x(){ let a = yield }).next(value)
思路总结：给目标generator函数披上一件generator外衣，在外衣中执行一次next()，即执行第一次next,此后再由外部传入参数

将对象封装成generator/创建Generator实例：
// 执行的是遍历器对象f，但是生成的对象实例是ob
function* g() {
  this.a = 1
  yield this.b = 2 
}
let obj = {}; g.call(obj); // obj 此时为Generator实例
// 执行的是遍历器对象f，但是生成的对象实例是obj 的统一,让所有对象都有能力成为Generator实例,也就是可以new 
function c() {
    return g.call(g.prototype)
}
class c {
  constructor () {
    return c
  }
}

let proto = new c(); proto.next();proto.a proto.b// 1,undefined; proto.next(); proto.b // 2
思路总结：利用call 函数修改函数时的嗲用对象传入原型链

状态机：
function* g() {
  whlie(trim){
    yield 1
    yield 2
  }
}
let obj = g();obj.next();obj.next()

异步编程的同步表达：
function* g() {
  yield f1()
  yield* g2()
}
function g2() {
  yield f2()
  yield f3()
}
let obj = g1();obj.next()
思路总结：利用yield和next的暂停和执行语法，将要同步的部分 现在yield后面, 需要时next出来

Prmoise
常用方法 Promise.try,Promise.race,Promise.all,Promise.resolve,Promise.reject
done 方法部署
Promise.prototype.done = function (onFulfilled,onReject) {
  return this.then(onFulfilled,onReject).catch(e=>{ throw e})
}
finally方法部署
Promise.prototype.finally = function(callback){
  let that = this.constructor
  return that.then(
    v => { P.resolve(callback()).then(()=> return v) },
    e => { P.reject(callback()).catch(e=>
    throw e) }
  )
}




在js中
所有按照元素所在位置的提取方法都是取前闭后开区间的参数值 [start,end)
所有类型的数据都有 toSource,toString,valueOf

this
1，默认当前window 全局环境 2，当前window 3，函数独立调用/函数作为方法调用/内置或回调函数用调用则指向当前window 4，闭包(return xxx;)中this默认指向当前windows
当函数被赋值给一个变量则this指向当前window  var a = {f:function(){}};var b= a.f;b.f();f中this指向当前window。隐式绑定
此外谁直接调用函数this指向谁 obj.obj2.f(); this => obj2
